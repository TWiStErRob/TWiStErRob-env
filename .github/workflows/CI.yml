name: CI
on:
  push:
    branches:
      - '**'

concurrency:
  group: ${{ github.ref == 'refs/heads/main' && format('ci-map-main-{0}', github.sha) || format('ci-map-{0}', github.ref) }}
  cancel-in-progress: true

env:
  # -Xallow-any-scripts-in-source-roots: https://youtrack.jetbrains.com/issue/KT-62575
  # -Werror: be strict
  # -progressive: use latest features
  KOTLINC: kotlinc -Xallow-any-scripts-in-source-roots -Werror -progressive

jobs:

  git-merged-branches:
    name: "üî® Build / GIT / Merged Branches"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v3

      - name: "Compile .main.kts."
        working-directory: scripts/git/merged-branches
        run: $KOTLINC find-merged-branches.main.kts


  github-draft-issues:
    name: "üî® Build / GitHub / Draft Issues"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v3

      - name: "Compile .main.kts."
        working-directory: scripts/github/project-manage-draft-issues
        run: $KOTLINC manage-draft-issues.main.kts


  github-repository-convention:
    name: "üî® Build / GitHub / Repository Convention"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v3

      - name: "Compile .main.kts."
        working-directory: scripts/github/repository-convention
        run: $KOTLINC validate.main.kts


  github-user-contribs:
    name: "üî® Build / GitHub / User Contributions"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v3

      - name: "Compile .main.kts."
        working-directory: scripts/github/user-contribs
        run: >
          $KOTLINC
          get.main.kts
          summarize.main.kts


  notion-import-data:
    name: "üî® Build / Notion / Import Data"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v3

      - name: "Compile .main.kts."
        working-directory: scripts/notion/import-data
        run: >
          $KOTLINC
          notion-import-csv.main.kts
          notion-import-dev-summit.main.kts
          notion-import-droidcon.main.kts
          siliconmilkroundabout-2022-november/companies-attending.main.kts


  notion-move-to-property:
    name: "üî® Build / Notion / Move to Property"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v3

      - name: "Compile .main.kts."
        working-directory: scripts/notion/page-section-move-to-property
        run: $KOTLINC notion-move-to-property.main.kts


  pst-maildir:
    name:  "üî® Build & Check / PST to Maildir migration"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v3

      - name: "Prepare test data."
        working-directory: scripts/special/pst-maildir-imap
        run: unzip test.zip -d test/

      - name: "Build pst2maildir image."
        working-directory: scripts/special/pst-maildir-imap
        run: docker build --tag pst2maildir .

      - name: "Find user."
        id: id
        run: |
          echo "uid=$(id --user)" >> $GITHUB_OUTPUT
          echo "gid=$(id --group)" >> $GITHUB_OUTPUT

      - name: "Run test migration in container."
        uses: addnab/docker-run-action@v3
        with:
          image: pst2maildir
          options: |
            --rm
            --volume ${{ github.workspace }}/scripts/special/pst-maildir-imap:/workdir
          run: |
            set -e
            cd /workdir
            readpst -o test/ test/test.pst
            mkdir -p test/Inbox/
            perl ./mbox2maildir.pl test/Inbox.mbox test/Inbox/ ${{ steps.id.outputs.uid }} ${{ steps.id.outputs.gid }}
            find test/Inbox/ -type f -exec python3 fix_maildir_mail_mtime.py "{}" \;
            find test/ -type f -exec chmod +r "{}" \;

      - name: "Validate migrated maildir output."
        working-directory: scripts/special/pst-maildir-imap/test
        run: |
          head Inbox.mbox
          ls -la Inbox/cur/*.mbox*
          find Inbox/cur/ -type f -exec head "{}" \;

      - name: "Prepare 'pst2maildir test' artifact."
        if: success() || failure()
        working-directory: scripts/special/pst-maildir-imap/test
        run: |
          # Compress Inbox/ because it contains strange characters in the filenames.
          # > Error: Artifact path is not valid: /Inbox/cur/1677516690.12.mbox:2,S. Contains the following character:  Colon :
          # > Invalid characters include:  Double quote ", Colon :, Less than <, Greater than >, Vertical bar |, Asterisk *, Question mark ?, Carriage return \r, Line feed \n
          # > The following characters are not allowed in files that are uploaded due to limitations with certain file systems such as NTFS.
          # > To maintain file system agnostic behavior, these characters are intentionally not allowed to prevent potential problems with downloads on different file systems.
          tar -f pst2maildir-inbox.tar -c Inbox/ --remove-files

      - name: "Upload 'pst2maildir test' artifact."
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: 'pst2maildir test'
          path: ${{ github.workspace }}/scripts/special/pst-maildir-imap/test/


  svn2git-migration:
    name:  "üî® Build & Check / SVN to GIT migration"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v3

      - name: "Create test repository."
        working-directory: scripts/special/svn2git-migration
        run: |
          mkdir workdir
          cd workdir
          
          svnadmin create test-repository
          echo "SVN_REPO=$(pwd)/test-repository" >> $GITHUB_ENV
          
          svn co file://$(pwd)/test-repository test-checkout
          cd test-checkout
          
          echo "test" > test.txt
          svn add test.txt
          echo -e "Test Project\n[IMP] Initial import" > commit.message
          svn commit --file commit.message test.txt
          svn update
          svn info
          svn log

      - name: "Set up migration configuration."
        working-directory: scripts/special/svn2git-migration
        run: |
          echo "$(whoami) = Test User <test@test.test>" > conf/migrate.authors
          cat conf/migrate.authors

      - name: "Build svn2git image."
        working-directory: scripts/special/svn2git-migration
        run: |
          git clone https://github.com/svn-all-fast-export/svn2git.git -b 1.0.18
          
          cd svn2git
          sed --in-place --expression='s/debian:8.11/debian:buster/' Dockerfile
          docker build --tag svn2git .
          cd ..
          
          docker build --tag svn2git-work .

      - name: "Run test migration in container."
        uses: addnab/docker-run-action@v3
        with:
          image: svn2git-work
          options: |
            --rm
            --volume ${{ github.workspace }}/scripts/special/svn2git-migration/conf:/tmp/conf
            --volume ${{ github.workspace }}/scripts/special/svn2git-migration/workdir:/workdir
            --volume ${{ env.SVN_REPO }}:/tmp/svn
          run: |
            set -e
            
            svn relocate file:///tmp/svn test-checkout
            
            /usr/local/svn2git/svn-all-fast-export \
            --identity-map /tmp/conf/migrate.authors \
            --rules /tmp/conf/monorepo-all.rules \
            --debug-rules \
            --stats \
            --svn-ignore \
            --propcheck \
            --empty-dirs \
            --add-metadata \
            --add-metadata-notes \
            --msg-filter 'sed --zero-terminated --regexp-extended --file=/tmp/conf/svn-msg-filter.sed' \
            /tmp/svn \
            >svn2git.log 2>&1

      - name: "Validate migrated git output."
        working-directory: scripts/special/svn2git-migration/workdir
        run: |
          git clone svn.git
          cd svn
          git log --no-decorate | grep -v -E 'Date:|commit' > actual-git-log.txt
          cat > expected-git-log.txt <<- EOF
          	Author: Test User <test@test.test>
          	
          	    [SVN] r1 Test Project in /
          	    [IMP] Initial import
          EOF
          diff expected-git-log.txt actual-git-log.txt

      - name: "Upload 'svn2git test' artifact."
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: 'svn2git test'
          path: ${{ github.workspace }}/scripts/special/svn2git-migration/workdir/


  detekt:
    name: "üîç Static Checks / Detekt"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v3

      - name: "Run detekt."
        env:
          DETEKT_VERSION: '1.22.0'
        run: |
          curl --silent --show-error --location --remote-name \
              https://github.com/detekt/detekt/releases/download/v${DETEKT_VERSION?}/detekt-cli-${DETEKT_VERSION?}.zip
          unzip "detekt-cli-*.zip"
          ./detekt-cli-*/bin/detekt-cli --version
          ./detekt-cli-*/bin/detekt-cli \
              --all-rules \
              --max-issues 0 \
              --base-path ${{ github.workspace }} \
              --report sarif:detekt.sarif \
              --report txt:detekt.txt \
              --report html:detekt.html \
              --report xml:detekt.xml \
              --report md:detekt.md \

      - name: "Upload 'Detekt Results' artifact."
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: 'Detekt Results'
          path: ${{ github.workspace }}/detekt.*

      - name: "Publish 'Code scanning results / detekt'."
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: ${{ github.workspace }}/detekt.sarif


  shellcheck:
    name: "üîç Static Checks / ShellCheck"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v3

      - name: "Run shellcheck."
        env:
          # Use https://github.com/koalaman/shellcheck
          SHELLCHECK_VERSION: '0.9.0'
        run: |
          curl --silent --show-error --location --remote-name \
              "https://github.com/koalaman/shellcheck/releases/download/v${SHELLCHECK_VERSION?}/shellcheck-v${SHELLCHECK_VERSION?}.linux.x86_64.tar.xz"
          tar --extract --xz --verbose --file="shellcheck-v${SHELLCHECK_VERSION?}.linux.x86_64.tar.xz"
          "./shellcheck-v${SHELLCHECK_VERSION}/shellcheck" --version
          
          # `shellcheck **.{sh}`, but without globbing.
          find ${{ github.workspace }} -type f \( -name '*.sh' \) \
              -exec "./shellcheck-v${SHELLCHECK_VERSION}/shellcheck" --enable=all --severity=style --shell=sh --check-sourced --external-sources --format=json {} + \
              > shellcheck.json
          
          # The previous command will fail if violations are found, careful putting more commands here.

      - name: "Convert shellcheck JSON output to SARIF."
        if: success() || failure()
        env:
          # Use https://github.com/psastras/sarif-rs
          SHELLCHECK_SARIF_VERSION: '0.3.5'
        run: |
          curl --silent --show-error --location --remote-name \
              "https://github.com/psastras/sarif-rs/releases/download/shellcheck-sarif-v${SHELLCHECK_SARIF_VERSION?}/shellcheck-sarif-x86_64-unknown-linux-gnu"
          chmod +x shellcheck-sarif-x86_64-unknown-linux-gnu
          
          # Relativize paths in the shellcheck JSON output, so in turn the SARIF output is relative too.
          sed --in-place --expression='s!"file":"${{ github.workspace }}/!"file":"!g' shellcheck.json
          
          ./shellcheck-sarif-x86_64-unknown-linux-gnu < shellcheck.json > shellcheck.sarif

      - name: "Pretty-print SARIF output."
        if: success() || failure()
        env:
          # Use https://github.com/psastras/sarif-rs
          SARIF_FMT_VERSION: '0.3.5'
        run: |
          curl --silent --show-error --location --remote-name \
              "https://github.com/psastras/sarif-rs/releases/download/sarif-fmt-v${SARIF_FMT_VERSION?}/sarif-fmt-x86_64-unknown-linux-gnu"
          chmod +x sarif-fmt-x86_64-unknown-linux-gnu
          
          ./sarif-fmt-x86_64-unknown-linux-gnu < shellcheck.sarif | tee shellcheck.sarif.txt

      - name: "Upload 'ShellCheck Results' artifact."
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: 'ShellCheck Results'
          path: ${{ github.workspace }}/shellcheck.*

      - name: "Publish 'Code scanning results / shellcheck'."
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ github.workspace }}/shellcheck.sarif


  psscriptanalyzer:
    name: "üîç Static Checks / PSScriptAnalyzer"
    runs-on: windows-latest
    timeout-minutes: 5
    steps:
      - name: "Checkout ${{ github.ref }} branch in ${{ github.repository }} repository."
        uses: actions/checkout@v3

      - name: "Run PSScriptAnalyzer."
        uses: microsoft/psscriptanalyzer-action@v1.1
        with:
          path: ${{ github.workspace }}\
          recurse: true
          output: PSScriptAnalyzer.sarif
          # Not a yaml array, used directly inside a PowerShell array @(...) when invoking analyzer.
          excludeRule: '"PSAvoidUsingWriteHost"'

      - name: "Upload 'PSScriptAnalyzer Results' artifact."
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: 'PSScriptAnalyzer Results'
          path: ${{ github.workspace }}/PSScriptAnalyzer.*

      - name: "Publish 'Code scanning results / PSScriptAnalyzer'."
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ github.workspace }}/PSScriptAnalyzer.sarif
